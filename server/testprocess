public class ExceptionDispatcher
{
    private readonly IMediator _mediator;

    public ExceptionDispatcher(IMediator mediator)
    {
        _mediator = mediator;
    }

    public async Task<T> Run<T>(Func<Task<T>> action, string accountName, string platformName)
    {
        try
        {
            return await action();
        }
        catch (Exception ex)
        {
            await _mediator.Publish(new ExceptionNotification(ex, accountName, platformName));
            throw;
        }
    }

    public async Task Run(Func<Task> action, string accountName, string platformName)
    {
        try
        {
            await action();
        }
        catch (Exception ex)
        {
            await _mediator.Publish(new ExceptionNotification(ex, accountName, platformName));
            throw;
        }
    }
}
